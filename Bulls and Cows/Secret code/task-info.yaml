type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/bullscows/Helper.java
  visible: true
  text: |
    package bullscows;

    import java.util.Random;
    import java.util.Scanner;

    public class Helper {

        public static String generateSecretNumber() {
            Random random = new Random();
            return String.format("%04d", random.nextInt(10000));
        }

        public static String generateSecretNumber(int numDigits) {

            // Secret number counter setup
            int numSNCount = numDigits;

            if (numDigits > 10) {
                return "Error: can't generate a secret number with a length of 11 " +
                        "because there aren't enough unique digits.";
            } else {

                // Secret number setup
                StringBuilder strSecretNumber = new StringBuilder();

                while (numSNCount > 0) {
                    String strPRN = String.valueOf(System.nanoTime());
                    for (int i = strPRN.length() - 1; i >= 0 && numSNCount > 0; i--) {
                        if (numSNCount == numDigits && strPRN.charAt(i) == '0') {
                            continue;
                        }
                        if (!strSecretNumber.toString().contains(String.valueOf(strPRN.charAt(i)))) {
                            strSecretNumber.append(strPRN.charAt(i));
                            numSNCount--;
                        }
                    }
                }
                return strSecretNumber.toString();
            }
        }

        public static String guessTheNumber() {
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine();
        }

    }
  learner_created: true
- name: src/bullscows/Grader.java
  visible: true
  text: |
    package bullscows;

    public class Grader {

        private String digitsTry;
        private String secretNumber;

        public Grader(String digitsTry, String secretNumber) {
            this.digitsTry = digitsTry;
            this.secretNumber = secretNumber;
        }

        public String determineTheGrade() {

            //Tries array
            String[] arNT = this.digitsTry.split("");

            // Secret Number array
            String[] arSN = this.secretNumber.split("");

            int cowsCounter = 0;
            int bullCounter = 0;

            for (int i = 0; i < arNT.length; i++) {
                for (int j = 0; j < arSN.length; j++) {

                    if (arNT[i].equals(arSN[j])) {
                        if (i == j) {
                            bullCounter++;
                        } else {
                            cowsCounter++;
                        }
                    }

                }
            }
            return String.format("Grade: %d bull(s) and %d cow(s). The secret code is %s.",
                    bullCounter, cowsCounter, this.secretNumber);
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5431#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 13 Feb 2023 00:02:07 UTC"
record: 3
